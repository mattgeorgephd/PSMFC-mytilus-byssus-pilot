for (file_name in txt_files) {
# Read in the data from the txt file
data <- read.delim(file_name,
header = FALSE,
sep = "\t", # how is the data separated?
dec = ".")
# transpose
data_transpose = t(data)
# Snip data, Fix headers
data_snipped <- as.data.frame(data_transpose[,2:4]) # keep all rows, grab only column 2 through 4
colnames(data_snipped) <- c('time', 'displacement', 'force')
# Fix column data types
data_snipped$time         <- as.numeric(data_snipped$time)
data_snipped$displacement <- as.numeric(data_snipped$displacement)
data_snipped$force        <- as.numeric(data_snipped$force)
# Fix NA
data_snipped$time[is.na(data_snipped$time)] <- 0
data_snipped$displacement[is.na(data_snipped$displacement)] <- 0
data_snipped$force[is.na(data_snipped$force)] <- 0
# Add a new column called "mussel" that contains the first FOUR characters of the file name
data_snipped$mussel <- substr(file_name, start = 1, stop = 4)
# Add new column that adds thread run
data_snipped$thread <- substr(file_name, start = 5, stop = 6)
# Add the data to the nested list using the file name as the list name
nested_list[[file_name]] <- data_snipped
}
# Loop through the list object "nested_list"
# calculate the maximum value from the "force" column
# Save the maximum into a dataframe, along with the first values in the "mussel" column and "thread" column
# create a data frame with three columns: mussel, thread, and max_force
max_force_treatment <- data.frame(mussel = numeric(),
thread = numeric(),
max_force = numeric())
# loop through the nested list
for(i in seq_along(nested_list)){
# create a data frame for each list in the nested list
current_df <- nested_list[[i]]
# add a row to the max_force data frame with the mussel, thread, and max_force
max_force_treatment <- rbind(max_force_treatment, data.frame(mussel = current_df$mussel[1],
thread = current_df$thread[1],
max_force = max(current_df$force)))
}
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/treatment/")
# create a data frame with three columns: mussel, thread, and max_force
integral_treatment <- data.frame(mussel = numeric(),
thread = numeric(),
auc = numeric())
for(i in seq_along(nested_list)){
# extract time and force column from the current nested list element using $ notation
current_df <- nested_list[[i]][c("time", "force")]
# fit loess function to "time" and "force" using loess() and save as an object
current_loess <- loess(force ~ time, data = current_df)
# plot the loess function with the corresponding time and force data points
jpeg(paste(nested_list[[i]]$mussel[1],"_",nested_list[[i]]$thread[1],".jpg",sep=""))
plot(current_df$time, current_df$force, main= "Force over Time Plot with Loess Function",
xlab = "Time", ylab = "Force", col = "blue")
lines(current_loess, col = "red") # add the loess function to the plot in red
dev.off()
# calculate area under the curve using approx() to approximate the integral and save to a variable
auc <- sum(diff(current_loess$x) * (approx(current_loess$x, current_loess$y, n = length(current_loess$x)))$y[-1])
# save the first values in the "mussel" and "thread" columns to variables
mussel_first_val <- nested_list[[i]]$mussel[1]
thread_first_val <- nested_list[[i]]$thread[1]
# create a dataframe to store the results, and save the variables to the corresponding columns in the dataframe
integral_treatment <- rbind(integral, data.frame(mussel = nested_list[[i]]$mussel[1],
thread = nested_list[[i]]$thread[1],
auc = auc))
}
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("/thread_strength/QC_plots/treatment/")
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/treatment/")
# create a data frame with three columns: mussel, thread, and max_force
integral_treatment <- data.frame(mussel = numeric(),
thread = numeric(),
auc = numeric())
for(i in seq_along(nested_list)){
# extract time and force column from the current nested list element using $ notation
current_df <- nested_list[[i]][c("time", "force")]
# fit loess function to "time" and "force" using loess() and save as an object
current_loess <- loess(force ~ time, data = current_df)
# plot the loess function with the corresponding time and force data points
jpeg(paste(nested_list[[i]]$mussel[1],"_",nested_list[[i]]$thread[1],".jpg",sep=""))
plot(current_df$time, current_df$force, main= "Force over Time Plot with Loess Function",
xlab = "Time", ylab = "Force", col = "blue")
lines(current_loess, col = "red") # add the loess function to the plot in red
dev.off()
# calculate area under the curve using approx() to approximate the integral and save to a variable
auc <- sum(diff(current_loess$x) * (approx(current_loess$x, current_loess$y, n = length(current_loess$x)))$y[-1])
# save the first values in the "mussel" and "thread" columns to variables
mussel_first_val <- nested_list[[i]]$mussel[1]
thread_first_val <- nested_list[[i]]$thread[1]
# create a dataframe to store the results, and save the variables to the corresponding columns in the dataframe
integral_treatment <- rbind(integral, data.frame(mussel = nested_list[[i]]$mussel[1],
thread = nested_list[[i]]$thread[1],
auc = auc))
}
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/control/")
# create a data frame with three columns: mussel, thread, and max_force
integral_control <- data.frame(mussel = numeric(),
thread = numeric(),
auc = numeric())
for(i in seq_along(nested_list)){
# extract time and force column from the current nested list element using $ notation
current_df <- nested_list[[i]][c("time", "force")]
# fit loess function to "time" and "force" using loess() and save as an object
current_loess <- loess(force ~ time, data = current_df)
# plot the loess function with the corresponding time and force data points
jpeg(paste(nested_list[[i]]$mussel[1],"_",nested_list[[i]]$thread[1],".jpg",sep=""))
plot(current_df$time, current_df$force, main= "Force over Time Plot with Loess Function",
xlab = "Time", ylab = "Force", col = "blue")
lines(current_loess, col = "red") # add the loess function to the plot in red
dev.off()
# calculate area under the curve using approx() to approximate the integral and save to a variable
auc <- sum(diff(current_loess$x) * (approx(current_loess$x, current_loess$y, n = length(current_loess$x)))$y[-1])
# save the first values in the "mussel" and "thread" columns to variables
mussel_first_val <- nested_list[[i]]$mussel[1]
thread_first_val <- nested_list[[i]]$thread[1]
# create a dataframe to store the results, and save the variables to the corresponding columns in the dataframe
integral_control <- rbind(integral_control, data.frame(mussel = nested_list[[i]]$mussel[1],
thread = nested_list[[i]]$thread[1],
auc = auc))
}
View(split_3)
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("/thread_strength/QC_plots/treatment/")
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/treatment/")
# create a data frame with three columns: mussel, thread, and max_force
integral_treatment <- data.frame(mussel = numeric(),
thread = numeric(),
auc = numeric())
for(i in seq_along(nested_list)){
# extract time and force column from the current nested list element using $ notation
current_df <- nested_list[[i]][c("time", "force")]
# fit loess function to "time" and "force" using loess() and save as an object
current_loess <- loess(force ~ time, data = current_df)
# plot the loess function with the corresponding time and force data points
jpeg(paste(nested_list[[i]]$mussel[1],"_",nested_list[[i]]$thread[1],".jpg",sep=""))
plot(current_df$time, current_df$force, main= "Force over Time Plot with Loess Function",
xlab = "Time", ylab = "Force", col = "blue")
lines(current_loess, col = "red") # add the loess function to the plot in red
dev.off()
# calculate area under the curve using approx() to approximate the integral and save to a variable
auc <- sum(diff(current_loess$x) * (approx(current_loess$x, current_loess$y, n = length(current_loess$x)))$y[-1])
# save the first values in the "mussel" and "thread" columns to variables
mussel_first_val <- nested_list[[i]]$mussel[1]
thread_first_val <- nested_list[[i]]$thread[1]
# create a dataframe to store the results, and save the variables to the corresponding columns in the dataframe
integral_treatment <- rbind(integral, data.frame(mussel = nested_list[[i]]$mussel[1],
thread = nested_list[[i]]$thread[1],
auc = auc))
}
knitr::opts_chunk$set(echo = TRUE)
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/treatment/")
# create a data frame with three columns: mussel, thread, and max_force
integral_treatment <- data.frame(mussel = numeric(),
thread = numeric(),
auc = numeric())
for(i in seq_along(nested_list)){
# extract time and force column from the current nested list element using $ notation
current_df <- nested_list[[i]][c("time", "force")]
# fit loess function to "time" and "force" using loess() and save as an object
current_loess <- loess(force ~ time, data = current_df)
# plot the loess function with the corresponding time and force data points
jpeg(paste(nested_list[[i]]$mussel[1],"_",nested_list[[i]]$thread[1],".jpg",sep=""))
plot(current_df$time, current_df$force, main= "Force over Time Plot with Loess Function",
xlab = "Time", ylab = "Force", col = "blue")
lines(current_loess, col = "red") # add the loess function to the plot in red
dev.off()
# calculate area under the curve using approx() to approximate the integral and save to a variable
auc <- sum(diff(current_loess$x) * (approx(current_loess$x, current_loess$y, n = length(current_loess$x)))$y[-1])
# save the first values in the "mussel" and "thread" columns to variables
mussel_first_val <- nested_list[[i]]$mussel[1]
thread_first_val <- nested_list[[i]]$thread[1]
# create a dataframe to store the results, and save the variables to the corresponding columns in the dataframe
integral_treatment <- rbind(integral, data.frame(mussel = nested_list[[i]]$mussel[1],
thread = nested_list[[i]]$thread[1],
auc = auc))
}
getwd()
setwd()
setwd("thread_strength/QC_plots/treatment/")
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/treatment/")
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("/thread_strength/QC_plots/treatment/")
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/treatment/")
setwd("thread_strength/QC_plots/treatment/")
getwd()
setwd("thread_strength/QC_plots/treatment/")
setwd("thread_strength/QC_plots/treatment")
setwd("/thread_strength/QC_plots/treatment")
setwd("thread_strength/QC_plots/treatment/")
getwd()
setwd("~/")
getwd()
require(stats)
# Loop through the list object "nested_list"
# extract the "time" and "force" column
# remove rows that contain zeros before first non-zero row. Apply to time column as well.
# remove rows that contain zeros after last non-zero row. Apply to time column as well.
# fit loess function to "time" and "force" after trimmed. Time is x, force is y.
# calculate area under the curve and save in dataframe, along with the first values in the "mussel" column and "thread" column from "nested_list"
# use a for loop to iterate through the nested list object "nested_list"
# Set the working directory to the folder containing the txt files
setwd("thread_strength/QC_plots/treatment/")
getwd()
setwd("/thread_strength/QC_plots/treatment/")
load("~/PSMFC-mytilus-byssus-pilot/PSMFC-mytilus-byssus-pilot.Rproj")
knitr::opts_chunk$set(echo = TRUE)
## RUN as part of "PSMFC-mytilus-byssus-pilot.Rproj"
## clear workspace
rm(list=ls())
## Load Packages
load.lib<-c("readxl","tidyverse","openxlsx","EnvStats") # List of required packages
install.lib <- load.lib[!load.lib %in% installed.packages()] # Select missing packages
for(lib in install.lib) install.packages(lib,dependencies=TRUE) # Install missing packages + dependencies
sapply(load.lib,require,character=TRUE) # Load all packages.
## Set ggplot theme
my_theme <- theme(line              = element_line(size=1.2),
rect              = element_rect(size=1.2),
text              = element_text(size=14,color="black"),
panel.background  = element_blank(),
panel.grid.major  = element_blank(),
panel.grid.minor  = element_blank(),
axis.text.x       = element_text(size=16,color="black"), #,angle=90),
axis.text.y       = element_text(size=16,color="black"),
axis.title.x      = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y      = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.ticks.x      = element_line(color="black"),
axis.ticks.y      = element_line(color="black"),
# axis.line         = element_line(color = "black", size = 0.1),
panel.border      = element_rect(color = "black", fill=NA, size=1.2),
legend.key        = element_blank(), # removes background of legend bullets
legend.position   = "none"
)
knitr::opts_chunk$set(echo = TRUE)
## RUN as part of "PSMFC-mytilus-byssus-pilot.Rproj"
## clear workspace
rm(list=ls())
## Load Packages
load.lib<-c("readxl","tidyverse","openxlsx","EnvStats") # List of required packages
install.lib <- load.lib[!load.lib %in% installed.packages()] # Select missing packages
for(lib in install.lib) install.packages(lib,dependencies=TRUE) # Install missing packages + dependencies
sapply(load.lib,require,character=TRUE) # Load all packages.
## Set ggplot theme
my_theme <- theme(line              = element_line(size=1.2),
rect              = element_rect(size=1.2),
text              = element_text(size=14,color="black"),
panel.background  = element_blank(),
panel.grid.major  = element_blank(),
panel.grid.minor  = element_blank(),
axis.text.x       = element_text(size=16,color="black"), #,angle=90),
axis.text.y       = element_text(size=16,color="black"),
axis.title.x      = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y      = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.ticks.x      = element_line(color="black"),
axis.ticks.y      = element_line(color="black"),
# axis.line         = element_line(color = "black", size = 0.1),
panel.border      = element_rect(color = "black", fill=NA, size=1.2),
legend.key        = element_blank(), # removes background of legend bullets
legend.position   = "none"
)
# extract data from all .txt files in a folder located at thread_strength/tensometer_output/control/ and add it to a nested list object
# the data has three column headers: Time, displacement, force.
# Add a third data column called "mussel" that is the first three characters of the file name.
getwd()
# Set the working directory to the folder containing the txt files
setwd("thread_strength/tensometer_output/control/")
# Create an empty list to hold the data
nested_list <- list()
# Get a vector of the names of all the txt files in the directory
txt_files <- list.files(pattern = "\\.txt$")
# Loop through each txt file, extract the data, and add it to the nested list
for (file_name in txt_files) {
# Read in the data from the txt file
data <- read.delim(file_name,
header = FALSE,
sep = "\t", # how is the data separated?
dec = ".")
# transpose
data_transpose = t(data)
# Snip data, Fix headers
data_snipped <- as.data.frame(data_transpose[,2:4]) # keep all rows, grab only column 2 through 4
colnames(data_snipped) <- c('time', 'displacement', 'force')
# Fix column data types
data_snipped$time         <- as.numeric(data_snipped$time)
data_snipped$displacement <- as.numeric(data_snipped$displacement)
data_snipped$force        <- as.numeric(data_snipped$force)
# Fix NA
data_snipped$time[is.na(data_snipped$time)] <- 0
data_snipped$displacement[is.na(data_snipped$displacement)] <- 0
data_snipped$force[is.na(data_snipped$force)] <- 0
# Extract mussel ID & thread test
split_1 <- str_split(file_name, "_") # Split file name by _
split_2 <- split_1[[1]][[2]] # Save thread test & .txt
split_3 <- str_split(split_2, "\\.") # Split thread test and .txt
data_snipped$mussel <- split_1[[1]][[1]] # Saving mussel ID
data_snipped$thread <- split_3[[1]][[1]] # Saving thread number
# Add the data to the nested list using the file name as the list name
nested_list[[file_name]] <- data_snipped
}
Getwd()
getwd()
# extract data from all .txt files in a folder located at thread_strength/tensometer_output/control/ and add it to a nested list object
# the data has three column headers: Time, displacement, force.
# Add a third data column called "mussel" that is the first three characters of the file name.
getwd()
# Set the working directory to the folder containing the txt files
setwd("thread_strength/tensometer_output/control/")
# Create an empty list to hold the data
nested_list <- list()
# Get a vector of the names of all the txt files in the directory
txt_files <- list.files(pattern = "\\.txt$")
# Loop through each txt file, extract the data, and add it to the nested list
for (file_name in txt_files) {
# Read in the data from the txt file
data <- read.delim(file_name,
header = FALSE,
sep = "\t", # how is the data separated?
dec = ".")
# transpose
data_transpose = t(data)
# Snip data, Fix headers
data_snipped <- as.data.frame(data_transpose[,2:4]) # keep all rows, grab only column 2 through 4
colnames(data_snipped) <- c('time', 'displacement', 'force')
# Fix column data types
data_snipped$time         <- as.numeric(data_snipped$time)
data_snipped$displacement <- as.numeric(data_snipped$displacement)
data_snipped$force        <- as.numeric(data_snipped$force)
# Fix NA
data_snipped$time[is.na(data_snipped$time)] <- 0
data_snipped$displacement[is.na(data_snipped$displacement)] <- 0
data_snipped$force[is.na(data_snipped$force)] <- 0
# Extract mussel ID & thread test
split_1 <- str_split(file_name, "_") # Split file name by _
split_2 <- split_1[[1]][[2]] # Save thread test & .txt
split_3 <- str_split(split_2, "\\.") # Split thread test and .txt
data_snipped$mussel <- split_1[[1]][[1]] # Saving mussel ID
data_snipped$thread <- split_3[[1]][[1]] # Saving thread number
# Add the data to the nested list using the file name as the list name
nested_list[[file_name]] <- data_snipped
}
getwd()
# Loop through the list object "nested_list"
# calculate the maximum value from the "force" column
# Save the maximum into a dataframe, along with the first values in the "mussel" column and "thread" column
# create a data frame with three columns: mussel, thread, and max_force
max_force_control <- data.frame(mussel = numeric(),
thread = numeric(),
max_force = numeric())
# loop through the nested list
for(i in seq_along(nested_list)){
# create a data frame for each list in the nested list
current_df <- nested_list[[i]]
# add a row to the max_force data frame with the mussel, thread, and max_force
max_force_control <- rbind(max_force_control, data.frame(mussel = current_df$mussel[1],
thread = current_df$thread[1],
max_force = max(current_df$force)))
}
getOption(repos)
getOption("repos")
knitr::opts_chunk$set(echo = TRUE)
## clear workspace
rm(list=ls())
## LDOd Packages
lDOd.lib<-c("readxl","tidyverse","bestNormalize","agricolae","nlme","multcomp","rstatix","lme4","lmerTest") # List of required packages
install.lib <- lDOd.lib[!lDOd.lib %in% installed.packages()] # Select missing packages
for(lib in install.lib) install.packages(lib,dependencies=TRUE) # Install missing packages + dependencies
sapply(lDOd.lib,require,character=TRUE) # LDOd all packages.
## Set ggplot theme
my_theme <- theme(line              = element_line(size=1.2),
rect              = element_rect(size=1.2),
text              = element_text(size=14,color="black"),
panel.background  = element_blank(),
panel.grid.major  = element_blank(),
panel.grid.minor  = element_blank(),
axis.text.x       = element_text(size=16,color="black"), #,angle=90),
axis.text.y       = element_text(size=16,color="black"),
axis.title.x      = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.title.y      = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.ticks.x      = element_line(color="black"),
axis.ticks.y      = element_line(color="black"),
# axis.line         = element_line(color = "black", size = 0.1),
panel.border      = element_rect(color = "black", fill=NA, size=1.2),
legend.key        = element_blank(), # removes background of legend bullets
legend.position   = "none"
)
mkdir analyses
# Load datasets
thread_plot       <- read_excel("thread_strength/summarized_data/summary.xlsx",
sheet = "data", col_names = TRUE)
# trt_list        <- read_excel("data/respirometry/respirometry.xlsx",
#                               sheet = "trt_list", col_names = TRUE)
thread_plot$treatment  <- factor(thread_plot$treatment,  levels = c("control","OW","OA","DO"), ordered=TRUE)
thread_plot$mussel     <- factor(thread_plot$mussel)
thread_plot$thread     <- factor(thread_plot$thread)
# # set alpha for boxplots
# alpha_set = 0.9
#
# # summarize by ploidy * timepoint * treatment
# resp_plot %>% group_by(trt_list) %>% summarise(mean=mean(SMR_weight), sd=sd(SMR_weight), count=n())
#
# # define SE
# summary_se <- function(.data, measure_var, ..., .ci = 0.95, na.rm = FALSE) {
#
#   measure_var <- dplyr::enquo(measure_var)
#   group_var <- dplyr::enquos(...)
#
#   .data %>%
#     group_by(!!! group_var) %>%
#     summarise(mean = mean(!! measure_var, na.rm = na.rm),
#               sd = sd(!! measure_var, na.rm = na.rm),
#               n = n(),
#               se = sd/sqrt(n),
#               ci = se * qt(.ci/2 + 0.5, n-1)) %>%
#     ungroup()
#
# }
# filter the data to only include the mussels w/ repeated observations
thread_plot_repeated <- thread_plot %>%
group_by(mussel) %>%
filter(n_distinct(treatment) == 2)
# create a new dataframe that groups the data by mussel and treatment and then summarizes the data by calculating the mean and standard deviation of the max_force, pad_area, and adhesion_kpa columns
thread_plot_all_mean <- thread_plot %>%
group_by(mussel, treatment) %>%
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd), .names = "{.col}_{.fn}"))
