# filter the data to only include the control and OW treatments
filter(treatment %in% c("control", "OW")) %>%
# filter the data to only include mussels that have two treatments
filter(n_distinct(treatment) == 2) %>%
# group the data by mussel and treatment
group_by(mussel, treatment) %>%
# summarize the data by calculating the mean and sd of max_force, pad_area, and adhesion_kpa
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd, se = ~ sd(.x) / sqrt(length(.x))), .names = "{.col}_{.fn}"))
# p1 <- ggplot(thread_plot_OW_all, aes(x=treatment, y=adhesion_kpa, group=as.factor(mussel))) +
#       geom_point() +
#       geom_line(linewidth=1, alpha = 1) +
#       # facet_wrap(~ID) +
#       # scale_color_manual(values=c("royalblue4","royalblue1")) +
#       scale_y_continuous(breaks = seq(0, 150, 50), limits = c(0, 155)) +
#       # scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
#       xlab(NULL) + ylab(NULL) + my_theme
#
# p1
#
# p2 <- ggplot(thread_plot_OW_repeated, aes(x=treatment, y=adhesion_kpa, group=as.factor(mussel))) +
#       geom_point() +
#       geom_line(linewidth=1, alpha = 1) +
#       # facet_wrap(~ID) +
#       # scale_color_manual(values=c("royalblue4","royalblue1")) +
#       scale_y_continuous(breaks = seq(0, 150, 50), limits = c(0, 155)) +
#       # scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
#       xlab(NULL) + ylab(NULL) + my_theme
#
# p2
# p3 <- ggplot(thread_plot_OW_mean, aes(x=treatment, y=adhesion_kpa_mean, group=as.factor(mussel))) +
#       geom_point() +
#       geom_line(linewidth=1, alpha = 1) +
#       # facet_wrap(~ID) +
#       # scale_color_manual(values=c("royalblue4","royalblue1")) +
#       scale_y_continuous(breaks = seq(0, 150, 50), limits = c(0, 155)) +
#       # scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
#       xlab(NULL) + ylab(NULL) + my_theme
#
# p3
# Generate a range of green shades for the lines
unique_mussels <- length(unique(thread_plot_OW_mean$mussel))
green_shades <- colorRampPalette(c("orangered1", "#fdae61"))(unique_mussels)
# Use position_dodge to ensure alignment between points and error bars
dodge_position <- position_dodge(width = 0.2)
# Create the plot
p4 <- ggplot(thread_plot_OW_mean, aes(x = treatment, y = adhesion_kpa_mean, group = as.factor(mussel), color = as.factor(mussel))) +
geom_point(size = 3, position = dodge_position) +
geom_errorbar(aes(ymin = adhesion_kpa_mean - adhesion_kpa_se, ymax = adhesion_kpa_mean + adhesion_kpa_se),
width = 0.3, size = 0.8, position = dodge_position) +
geom_line(linewidth = 1, position = dodge_position) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 200)) +
scale_color_manual(values = green_shades) +
xlab(NULL) +
ylab(NULL) +
my_theme +
theme(legend.position = "none")  # Remove legend if each line represents a unique mussel
p4
# ggsave("analyses/thread_strength/LineGraph_OW_AllMussels_MeanThreads.png",
#        plot   = p3,
#        dpi    = 1200,
#        device = "png",
#        width  = 4,
#        height = 4,
#        units  = "in")
ggsave("analyses/thread_strength/LineGraph_OW_OnlyRepeatedMussels_MeanThreads.png",
plot   = p4,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
# ChatGPT prompts:
# create a new dataframe called "thread_plot_DO" that is only data from thread_plot when the column "treatment" is control or DO and the same "mussel" ID is represented in both treatments (as noted in the "mussel" column)
# create a new dataframe called "thread_plot_DO_mean" from "thread_plot" that produces the mean and standard deviation of the columns "max_force", "pad_area", and "adhesion_kpa"  across unique combinations of "mussel" and "treatment".
# filter the data to only include the control and DO treatment
thread_plot_DO_all <- thread_plot %>% filter(treatment == "control" | treatment == "DO")
# filter the data to only include the control and DO treatments
thread_plot_DO_repeated <- thread_plot %>%
group_by(mussel) %>%
filter(treatment %in% c("control", "DO")) %>%
filter(n_distinct(treatment) == 2)
# create a new data frame called thread_plot_DO_mean
# group the data by mussel
# filter the data to only include the control and DO treatments
# group the data by mussel and treatment
# summarize the data by calculating the mean and sd for max_force, pad_area, and adhesion_kpa
# rename the columns to include the statistic calculated
thread_plot_DO_mean <- thread_plot %>%
group_by(mussel) %>%
filter(treatment %in% c("control", "DO")) %>%
group_by(mussel, treatment) %>%
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd, se = ~ sd(.x) / sqrt(length(.x))), .names = "{.col}_{.fn}"))
thread_plot_DO_repeated_mean <- thread_plot %>%
# group the data by mussel
group_by(mussel) %>%
# filter the data to only include the control and DO treatments
filter(treatment %in% c("control", "DO")) %>%
# filter the data to only include mussels that have two treatments
filter(n_distinct(treatment) == 2) %>%
# group the data by mussel and treatment
group_by(mussel, treatment) %>%
# summarize the data by calculating the mean and sd of max_force, pad_area, and adhesion_kpa
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd, se = ~ sd(.x) / sqrt(length(.x))), .names = "{.col}_{.fn}"))
# p1 <- ggplot(thread_plot_DO_all, aes(x=treatment, y=adhesion_kpa, group=as.factor(mussel))) +
#       geom_point() +
#       geom_line(linewidth=1, alpha = 1) +
#       # facet_wrap(~ID) +
#       # scale_color_manual(values=c("royalblue4","royalblue1")) +
#       scale_y_continuous(breaks = seq(0, 150, 50), limits = c(0, 155)) +
#       # scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
#       xlab(NULL) + ylab(NULL) + my_theme
#
# p1
#
# p2 <- ggplot(thread_plot_DO_repeated, aes(x=treatment, y=adhesion_kpa, group=as.factor(mussel))) +
#       geom_point() +
#       geom_line(linewidth=1, alpha = 1) +
#       # facet_wrap(~ID) +
#       # scale_color_manual(values=c("royalblue4","royalblue1")) +
#       scale_y_continuous(breaks = seq(0, 150, 50), limits = c(0, 155)) +
#       # scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
#       xlab(NULL) + ylab(NULL) + my_theme
#
# p2
# p3 <- ggplot(thread_plot_DO_mean, aes(x=treatment, y=adhesion_kpa_mean, group=as.factor(mussel))) +
#       geom_point() +
#       geom_line(linewidth=1, alpha = 1) +
#       # facet_wrap(~ID) +
#       # scale_color_manual(values=c("royalblue4","royalblue1")) +
#       scale_y_continuous(breaks = seq(0, 150, 50), limits = c(0, 155)) +
#       # scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
#       xlab(NULL) + ylab(NULL) + my_theme
#
# p3
# Generate a range of green shades for the lines
unique_mussels <- length(unique(thread_plot_DO_mean$mussel))
green_shades <- colorRampPalette(c("#4B0082", "#9884a3"))(unique_mussels)
# Use position_dodge to ensure alignment between points and error bars
dodge_position <- position_dodge(width = 0.2)
# Create the plot
p4 <- ggplot(thread_plot_DO_mean, aes(x = treatment, y = adhesion_kpa_mean, group = as.factor(mussel), color = as.factor(mussel))) +
geom_point(size = 3, position = dodge_position) +
geom_errorbar(aes(ymin = adhesion_kpa_mean - adhesion_kpa_se, ymax = adhesion_kpa_mean + adhesion_kpa_se),
width = 0.3, size = 0.8, position = dodge_position) +
geom_line(linewidth = 1, position = dodge_position) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 200)) +
scale_color_manual(values = green_shades) +
xlab(NULL) +
ylab(NULL) +
my_theme +
theme(legend.position = "none")  # Remove legend if each line represents a unique mussel
p4
# ggsave("analyses/thread_strength/LineGraph_DO_AllMussels_MeanThreads.png",
#        plot   = p3,
#        dpi    = 1200,
#        device = "png",
#        width  = 4,
#        height = 4,
#        units  = "in")
ggsave("analyses/thread_strength/LineGraph_DO_OnlyRepeatedMussels_MeanThreads.png",
plot   = p4,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
# Define dataset for analysis, factors
dat_stat <- thread_plot
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt, data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_OA
# Define dataset for analysis, factors
dat_stat <- thread_plot_OA_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID/thread), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_OW
# Define dataset for analysis, factors
dat_stat <- thread_plot_OW_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID/thread), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_DO
# Define dataset for analysis, factors
dat_stat <- thread_plot_DO_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID/thread), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_OW_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt, data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_OA_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt, data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_DO_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt , data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_DO_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_OW_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Define dataset for analysis, factors
dat_stat <- thread_plot_OA_all
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
