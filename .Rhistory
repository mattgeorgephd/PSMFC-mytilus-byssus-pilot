outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot data from all mussels, averaging across threads produced by the mussel at each timepoint
p3 <- ggplot(thread_plot_all_mean, aes(x=treatment, y=adhesion_kpa_mean)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p3
# plot only mussels with repeated measures, averaging across threads produced by the mussel at each timepoint
p4 <- ggplot(thread_plot_repeated_mean, aes(x=treatment, y=adhesion_kpa_mean)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p4
ggsave("analyses/thread_strength/BP_AllMussels_AllThreads.png",
plot   = p1,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_OnlyRepeatedMussels_AllThreads.png",
plot   = p2,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_AllMussels_MeanThreads.png",
plot   = p3,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_OnlyRepeatedMussels_MeanThreads.png",
plot   = p4,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
# Define dataset for analysis, factors
dat_stat <- thread_plot_repeated
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# ChatGPT prompt:
# All data is in the "thread_plot_DO_all" dataframe. Multiple mussels were repeatedly sampled. Mussels were given a unique ID, reported in the "mussel" column. Each Mussel produced multiple threads before and after exposure to a "treatment". Each thread is unique and given a label in the "thread" column. The strength of threads were tested and reported as "adhesion_kpa". Generate a repeated measures anova that tests the impact of "treatment" on "adhesion_kpa". Use the aov funtion.# All data is in the "thread_plot_DO_all" dataframe. Multiple mussels were repeatedly sampled. Mussels were given a unique ID, reported in the "mussel" column. Each Mussel produced multiple threads before and after exposure to a "treatment". Each thread is unique and given a label in the "thread" column. The strength of threads were tested and reported as "adhesion_kpa". Generate a repeated measures anova that tests the impact of "treatment" on "adhesion_kpa". Use the aov function.
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID/thread), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# Load datasets
thread_plot       <- read_excel("thread_strength/summarized_data/summary.xlsx",
sheet = "data", col_names = TRUE)
# trt_list        <- read_excel("data/respirometry/respirometry.xlsx",
#                               sheet = "trt_list", col_names = TRUE)
thread_plot$treatment  <- factor(thread_plot$treatment,  levels = c("control","OW","OA","DO"), ordered=TRUE)
thread_plot$mussel     <- factor(thread_plot$mussel)
thread_plot$thread     <- factor(thread_plot$thread)
# # set alpha for boxplots
# alpha_set = 0.9
#
# # summarize by ploidy * timepoint * treatment
# resp_plot %>% group_by(trt_list) %>% summarise(mean=mean(SMR_weight), sd=sd(SMR_weight), count=n())
#
# # define SE
# summary_se <- function(.data, measure_var, ..., .ci = 0.95, na.rm = FALSE) {
#
#   measure_var <- dplyr::enquo(measure_var)
#   group_var <- dplyr::enquos(...)
#
#   .data %>%
#     group_by(!!! group_var) %>%
#     summarise(mean = mean(!! measure_var, na.rm = na.rm),
#               sd = sd(!! measure_var, na.rm = na.rm),
#               n = n(),
#               se = sd/sqrt(n),
#               ci = se * qt(.ci/2 + 0.5, n-1)) %>%
#     ungroup()
#
# }
thread_plot$adhesion_kpa <- thread_plot$max_force/thread_plot$pad_area*1000
# filter the data to only include the mussels w/ repeated observations
thread_plot_repeated <- thread_plot %>%
group_by(mussel) %>%
filter(n_distinct(treatment) == 2)
# create a new dataframe that groups the data by mussel and treatment and then summarizes the data by calculating the mean and standard deviation of the max_force, pad_area, and adhesion_kpa columns
thread_plot_all_mean <- thread_plot %>%
group_by(mussel, treatment) %>%
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd), .names = "{.col}_{.fn}"))
# average across thread for each mussel * treatment combination, only mussels with repeated measurements
# create a new dataframe called thread_plot_repeated_mean
thread_plot_repeated_mean <- thread_plot %>%
# group the data by mussel
group_by(mussel) %>%
# filter the data to only include mussels that have two treatments
filter(n_distinct(treatment) == 2) %>%
# group the data by mussel and treatment
group_by(mussel, treatment) %>%
# summarize the data by calculating the mean and sd of max_force, pad_area, and adhesion_kpa
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd), .names = "{.col}_{.fn}"))
# Plot all data
p1 <- ggplot(thread_plot, aes(x=treatment, y=adhesion_kpa)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
# scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
xlab(NULL) + ylab(NULL) + my_theme
p1
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot data from all mussels, averaging across threads produced by the mussel at each timepoint
p3 <- ggplot(thread_plot_all_mean, aes(x=treatment, y=adhesion_kpa_mean)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p3
# plot only mussels with repeated measures, averaging across threads produced by the mussel at each timepoint
p4 <- ggplot(thread_plot_repeated_mean, aes(x=treatment, y=adhesion_kpa_mean)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p4
ggsave("analyses/thread_strength/BP_AllMussels_AllThreads.png",
plot   = p1,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_OnlyRepeatedMussels_AllThreads.png",
plot   = p2,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_AllMussels_MeanThreads.png",
plot   = p3,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_OnlyRepeatedMussels_MeanThreads.png",
plot   = p4,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
# Define dataset for analysis, factors
dat_stat <- thread_plot_repeated
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# ChatGPT prompt:
# All data is in the "thread_plot_DO_all" dataframe. Multiple mussels were repeatedly sampled. Mussels were given a unique ID, reported in the "mussel" column. Each Mussel produced multiple threads before and after exposure to a "treatment". Each thread is unique and given a label in the "thread" column. The strength of threads were tested and reported as "adhesion_kpa". Generate a repeated measures anova that tests the impact of "treatment" on "adhesion_kpa". Use the aov funtion.# All data is in the "thread_plot_DO_all" dataframe. Multiple mussels were repeatedly sampled. Mussels were given a unique ID, reported in the "mussel" column. Each Mussel produced multiple threads before and after exposure to a "treatment". Each thread is unique and given a label in the "thread" column. The strength of threads were tested and reported as "adhesion_kpa". Generate a repeated measures anova that tests the impact of "treatment" on "adhesion_kpa". Use the aov function.
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID/thread), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8, bw = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8, bw = 0.2) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8, bw = 1) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8, bw = 3) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8, bw = 5) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8, bw = 8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 0.2) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 10) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 10) +
geom_boxplot(colour = "black", size = 1.2, outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 10) +
geom_boxplot(colour = "black", size = 0.3, outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 10) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = 16, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 10) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = NA, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 10) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = NA, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8, coef = 0) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 10) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = NA, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = FALSE, alpha = 0.8, coef = 0) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 12) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = NA, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = FALSE, alpha = 0.8, coef = 0) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 12) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = NA, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = FALSE, alpha = 0.8, coef = 0) +
geom_point(position = position_jitter(width = .03, seed = 0), size = 5, alpha = .5) +
geom_point(position = position_jitter(width = .03, seed = 0), size = 5, stroke = .7, shape = 1, color = "black") +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 12) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = NA, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = FALSE, alpha = 0.8, coef = 0) +
geom_point(position = position_jitter(width = .03, seed = 0), size = 5, alpha = .3) +
geom_point(position = position_jitter(width = .03, seed = 0), size = 5, stroke = .7, shape = 1, color = "black") +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# Load datasets
thread_plot       <- read_excel("thread_strength/summarized_data/summary.xlsx",
sheet = "data", col_names = TRUE)
# trt_list        <- read_excel("data/respirometry/respirometry.xlsx",
#                               sheet = "trt_list", col_names = TRUE)
thread_plot$treatment  <- factor(thread_plot$treatment,  levels = c("control","OW","OA","DO"), ordered=TRUE)
thread_plot$mussel     <- factor(thread_plot$mussel)
thread_plot$thread     <- factor(thread_plot$thread)
# # set alpha for boxplots
# alpha_set = 0.9
#
# # summarize by ploidy * timepoint * treatment
# resp_plot %>% group_by(trt_list) %>% summarise(mean=mean(SMR_weight), sd=sd(SMR_weight), count=n())
#
# # define SE
# summary_se <- function(.data, measure_var, ..., .ci = 0.95, na.rm = FALSE) {
#
#   measure_var <- dplyr::enquo(measure_var)
#   group_var <- dplyr::enquos(...)
#
#   .data %>%
#     group_by(!!! group_var) %>%
#     summarise(mean = mean(!! measure_var, na.rm = na.rm),
#               sd = sd(!! measure_var, na.rm = na.rm),
#               n = n(),
#               se = sd/sqrt(n),
#               ci = se * qt(.ci/2 + 0.5, n-1)) %>%
#     ungroup()
#
# }
thread_plot$adhesion_kpa <- thread_plot$max_force/thread_plot$pad_area*1000
# filter the data to only include the mussels w/ repeated observations
thread_plot_repeated <- thread_plot %>%
group_by(mussel) %>%
filter(n_distinct(treatment) == 2)
# create a new dataframe that groups the data by mussel and treatment and then summarizes the data by calculating the mean and standard deviation of the max_force, pad_area, and adhesion_kpa columns
thread_plot_all_mean <- thread_plot %>%
group_by(mussel, treatment) %>%
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd), .names = "{.col}_{.fn}"))
# average across thread for each mussel * treatment combination, only mussels with repeated measurements
# create a new dataframe called thread_plot_repeated_mean
thread_plot_repeated_mean <- thread_plot %>%
# group the data by mussel
group_by(mussel) %>%
# filter the data to only include mussels that have two treatments
filter(n_distinct(treatment) == 2) %>%
# group the data by mussel and treatment
group_by(mussel, treatment) %>%
# summarize the data by calculating the mean and sd of max_force, pad_area, and adhesion_kpa
summarize(across(c(max_force, pad_area, adhesion_kpa), list(mean = mean, sd = sd), .names = "{.col}_{.fn}"))
# Plot all data
p1 <- ggplot(thread_plot, aes(x=treatment, y=adhesion_kpa)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
# scale_x_continuous(breaks = seq(0, 30, 5), limits = c(0, 32)) +
xlab(NULL) + ylab(NULL) + my_theme
p1
# plot only mussels with repeated measurements
p2 <- ggplot(thread_plot_repeated, aes(x=treatment, y=adhesion_kpa)) +
geom_violin(aes(fill = treatment, fill = after_scale(colorspace::lighten(fill, .5))), size = 1.2, bw = 12) +
geom_boxplot(colour = "black", size = 0.8, outlier.colour="black", outlier.shape = NA, width = 0.2,
outlier.size=1, notch=FALSE, varwidth = FALSE, alpha = 0.8, coef = 0) +
geom_point(position = position_jitter(width = .03, seed = 0), size = 5, alpha = .3) +
geom_point(position = position_jitter(width = .03, seed = 0), size = 5, stroke = .7, shape = 1, color = "black") +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 200)) +
xlab(NULL) + ylab(NULL) + my_theme
p2
# plot data from all mussels, averaging across threads produced by the mussel at each timepoint
p3 <- ggplot(thread_plot_all_mean, aes(x=treatment, y=adhesion_kpa_mean)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p3
# plot only mussels with repeated measures, averaging across threads produced by the mussel at each timepoint
p4 <- ggplot(thread_plot_repeated_mean, aes(x=treatment, y=adhesion_kpa_mean)) +
geom_boxplot(colour = "black", size = 0.8,outlier.colour="black", outlier.shape = 16,
outlier.size=1, notch=FALSE, varwidth = TRUE, alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 200, 25), limits = c(0, 210)) +
xlab(NULL) + ylab(NULL) + my_theme
p4
ggsave("analyses/thread_strength/BP_AllMussels_AllThreads.png",
plot   = p1,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_OnlyRepeatedMussels_AllThreads.png",
plot   = p2,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_AllMussels_MeanThreads.png",
plot   = p3,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
ggsave("analyses/thread_strength/BP_OnlyRepeatedMussels_MeanThreads.png",
plot   = p4,
dpi    = 1200,
device = "png",
width  = 4,
height = 4,
units  = "in")
# Define dataset for analysis, factors
dat_stat <- thread_plot_repeated
test_me  <- dat_stat$adhesion_kpa
dat_stat$ID         <- factor(dat_stat$mussel)
dat_stat$trt        <- factor(dat_stat$treatment)
dat_stat$thread     <- factor(dat_stat$thread)
dat_stat$pad        <- factor(dat_stat$pad_area)
# Test for normality
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
norm_test <- shapiro.test(test_me) # p-value fail = good, don't need transformation
print(norm_test$p.value)
# Normalize data if normality test failed
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_me)
test_me <- normalized$x.t # overwrite
qqnorm(test_me) # check linearity of transformed data
qqline(test_me)
print(shapiro.test(test_me))
print("transformed!",quote=FALSE)}
dat_stat$response <- test_me
# ChatGPT prompt:
# All data is in the "thread_plot_DO_all" dataframe. Multiple mussels were repeatedly sampled. Mussels were given a unique ID, reported in the "mussel" column. Each Mussel produced multiple threads before and after exposure to a "treatment". Each thread is unique and given a label in the "thread" column. The strength of threads were tested and reported as "adhesion_kpa". Generate a repeated measures anova that tests the impact of "treatment" on "adhesion_kpa". Use the aov funtion.# All data is in the "thread_plot_DO_all" dataframe. Multiple mussels were repeatedly sampled. Mussels were given a unique ID, reported in the "mussel" column. Each Mussel produced multiple threads before and after exposure to a "treatment". Each thread is unique and given a label in the "thread" column. The strength of threads were tested and reported as "adhesion_kpa". Generate a repeated measures anova that tests the impact of "treatment" on "adhesion_kpa". Use the aov function.
# This will generate an ANOVA model with "treatment" as the fixed effect and "mussel" and "thread" as random grouping factors.
# The "Error" term specifies that you want a within-subjects design, with the "mussel" and "thread" factors nested within each other.
my_test <- aov(response ~ trt + Error(ID/thread), data = dat_stat)
my_test_summary <- summary(my_test)
summary(my_test)
# Significant interaction observed between timepoint:trt:ploidy. Proceed with HSD test.
tx <- with(dat_stat, interaction(trt))
amod <- aov(response ~ tx, data = dat_stat)
mult_comp <- HSD.test(amod, "tx", group=TRUE, console=TRUE)
#
# # save output
# write.table(my_test_summary$`Error: Within`[[1]], file = "stats/respirometry/AOV_respirometry.csv",      row.names = TRUE)
# write.table(mult_comp$groups,                     file = "stats/respirometry/HSD_test_respirometry.csv", row.names = TRUE)
